openapi: 3.0.3
info:
  title: Lawyer-sass
  description: Lawyer-sass
  version: 1.0.0
servers:
  - url: http://example.com
paths:
  /api/v1/registration:
    post:
      summary: Регистрация пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          description: Ошибка сервера
  /api/v1/admin/registration:
    post:
      summary: Регистрация админа
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationAdminRequest'
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          description: Ошибка сервера
  /api/v1/auth/login:
    post:
      summary: Логин юзера
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/admin/auth/login:
    post:
      summary: Логин админа
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/auth/logout:
    post:
      summary: Logout
      security:
        - securitySchemes: [ ]
      responses:
        '200':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/customer:
    post:
      summary: Создание клиента
      security:
        - securitySchemes: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
    get:
      summary: Получение клиентов пагинацией
      security:
        - securitySchemes: [ ]
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponsePaginated'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/customer/{id}:
    parameters:
      - in: path
        name: id
        required: true
    get:
      summary: Получение клиента по id
      security:
        - securitySchemes: [ ]
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
    delete:
      summary: Удаление(мягкое) клиента по id
      security:
        - securitySchemes: [ ]
      responses:
        '204':
          description: Успешный ответ сервера
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
    put:
      summary: Обновление клиента
      security:
        - securitySchemes: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/lawsuit-category:
    post:
      summary: Создание категории дела
      security:
        - securitySchemes: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LawsuitCategoryRequest'
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawsuitCategoryResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
    get:
      summary: Получение всех категорий дел
      security:
        - securitySchemes: [ ]
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawsuitCategoryResponseCollection'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/lawsuit-category/{id}:
    parameters:
      - in: path
        name: id
        required: true
    get:
      summary: Получение категории дела по id
      security:
        - securitySchemes: [ ]
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawsuitCategoryResponse'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
    delete:
      summary: Удаление(мягкое) категории дела по id
      security:
        - securitySchemes: [ ]
      responses:
        '204':
          description: Успешный ответ сервера
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
    put:
      summary: Обновление категории дела
      security:
        - securitySchemes: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LawsuitCategoryRequest'
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawsuitCategoryResponse'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/lawsuit/{id}/authorities:
    get:
      parameters:
        - in: path
          name: id
          required: true
      summary: Получение всех органов рассморений для дела по id
      security:
        - securitySchemes: [ ]
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorityCollectionResponse'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
  /api/v1/lawsuit:
    post:
      summary: Создание дела
      security:
        - securitySchemes: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LawsuitRequest'
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawsuitResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера
    get:
      summary: Получение дел пагинацией
      security:
        - securitySchemes: [ ]
      responses:
        '201':
          description: Успешный ответ сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponsePaginated'
        '403':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Ошибка сервера

components:
  securitySchemes:
    jwtAuth:
      type: http
      in: header
      name: Bearer Authentication
      scheme: bearer
      bearerFormat: JWT
      description: Header Authorization с токеном и его типом
  schemas:
    PaginateMeta:
      type: object
      properties:
        links:
          type: object
          properties:
            first:
              type: string
            last:
              type: string
            prev:
              type: string
            next:
              type: string
        meta:
          type: object
          properties:
            current_page:
              type: integer
            from:
              type: integer
            last_page:
              type: integer
            links:
              type: array
              items:
                properties:
                  url:
                    type: string
                  label:
                    type: string
                  active:
                    type: boolean
            path:
              type: string
            per_page:
              type: integer
            to:
              type: integer
            total:
              type: integer
    CustomerResponsePaginated:
      type: object
      properties:
        data:
          type: array
          items:
            - $ref: '#/components/schemas/CustomerData'
          additionalProperties:
            $ref: '#/components/schemas/PaginateMeta'
    CustomerResponse:
      type: object
      properties:
        success:
          type: integer
        error:
          type: string
        data:
          $ref: '#/components/schemas/CustomerData'
    AuthorityCollectionResponse:
      type: object
      properties:
        success:
          type: integer
        error:
          type: string
        data:
          type: array
          items:
            - $ref: '#/components/schemas/AuthorityData'
    AuthorityData:
      type: object
      properties:
        id:
          type: integer
        lawsuit_number:
          type: string
        lawsuit_number_link:
          type: string
        authority:
          type: string
        judge:
          type: string
        cabinet:
          type: string
        comment:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    LawsuitCategoryResponseCollection:
      type: object
      properties:
        success:
          type: integer
        error:
          type: string
        data:
          type: array
          items:
            - $ref: '#/components/schemas/LawsuitCategoryData'
    LawsuitCategoryResponse:
      type: object
      properties:
        success:
          type: integer
        error:
          type: string
        data:
          $ref: '#/components/schemas/LawsuitCategoryData'
    LawsuitResponse:
      type: object
      properties:
        success:
          type: integer
        error:
          type: string
        data:
          $ref: '#/components/schemas/LawsuitData'
    LawsuitData:
      type: object
      properties:
        id:
          type: integer
        plot:
          type: string
        opponent:
          type: string
        rating:
          type: integer
        contract_number:
          type: string
          nullable: true
        contract_signing_date:
          type: string
          nullable: true
        contract_validity:
          type: string
          nullable: true
        power_of_attorney:
          type: string
          nullable: true
        power_of_attorney_signing_date:
          type: string
          nullable: true
        power_of_attorney_validity:
          type: string
          nullable: true
        customer_id:
          type: integer
          nullable: true
        lawsuit_category_id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
    LawsuitCategoryData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        label:
          type: string
        color:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
    CustomerData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        telegram:
          type: string
        whats_app:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
    CustomerRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        telegram:
          type: string
        whats_app:
          type: string
    LawsuitCategoryRequest:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
    LawsuitRequest:
      type: object
      properties:
        plot:
          type: string
        opponent:
          type: string
        rating:
          type: integer
        contract_number:
          type: string
          nullable: true
        contract_signing_date:
          type: string
          nullable: true
        contract_validity:
          type: string
          nullable: true
        power_of_attorney:
          type: string
          nullable: true
        power_of_attorney_signing_date:
          type: string
          nullable: true
        power_of_attorney_validity:
          type: string
          nullable: true
        customer_id:
          type: integer
          nullable: true
        lawsuit_category_id:
          type: integer
    UserData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        lastname:
          type: string
        surname:
          type: string
        email:
          type: string
        phone:
          type: string
        type:
          type: string
    SuccessResponse:
      type: object
      properties:
        success:
          type: integer
        error:
          type: array
        message:
          type: string
    UnauthorizedResponse:
      type: object
      properties:
        error:
          type: string
    LoginResponse:
      type: object
      properties:
        error:
          type: array
        success:
          type: integer
        data:
          type: object
          properties:
            access_token:
              type: string
            token_type:
              type: string
            expires_in:
              type: integer
            user:
              $ref: '#/components/schemas/UserData'
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    RegistrationRequest:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        phone:
          type: string
          example: 79859654123
        type:
          type: string
          enum:
            - lawyer
            - advocate
        lastname:
          type: string
        surname:
          type: string
        password:
          type: string
        repeat_password:
          type: string
      required:
        - email
        - name
        - phone
        - type
        - lastname
        - password
        - repeat_password
    RegistrationAdminRequest:
      type: object
      properties:
        email:
          type: string
        phone:
          type: string
          example: 79859654123
        password:
          type: string
        repeat_password:
          type: string
      required:
        - email
        - phone
        - password
        - repeat_password
